name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  NPM_VERSION: '9'

jobs:
  # Test Job
  test:
    name: Test Application
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    services:
      mongodb:
        image: mongo:6.0
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test123
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5


    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Create environment file
        run: |
          echo "NODE_ENV=test" > .env
          echo "MONGO_URI=mongodb://localhost:27017/test" >> .env
          echo "JWT_SECRET=test-secret-key" >> .env
          echo "PORT=4000" >> .env

      - name: Wait for MongoDB
        run: |
          timeout 120 bash -c 'until node -e "const mongoose = require(\"mongoose\"); mongoose.connect(\"mongodb://localhost:27017/test\").then(() => { console.log(\"MongoDB ready\"); process.exit(0); }).catch(() => { console.log(\"Waiting for MongoDB...\"); process.exit(1); });" 2>/dev/null; do sleep 2; done'

      - name: Run isolated tests first
        run: |
          npm test -- tests/isolated.test.js
        env:
          CI: true
        timeout-minutes: 3

      - name: Run minimal tests
        run: |
          npm test -- tests/minimal.test.js
        env:
          CI: true
        timeout-minutes: 3

      - name: Run simple tests
        run: |
          npm test -- tests/simple.test.js
        env:
          CI: true
        timeout-minutes: 3

      - name: Run full test suite
        run: |
          npm test -- --testTimeout=45000 --forceExit --detectOpenHandles --maxWorkers=1
        env:
          CI: true
        timeout-minutes: 10

      - name: Run linting
        run: npm run lint

  # Build Job
  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: |
            dist/
            node_modules/
            package*.json
            .env.example

  # Deploy to Railway (Alternative: Heroku, Render, etc.)
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Railway
        uses: bervProject/railway-deploy@v1.0.0
        with:
          railway_token: ${{ secrets.RAILWAY_TOKEN }}
          service: ${{ secrets.RAILWAY_SERVICE }}

  # Alternative: Deploy to Heroku
  # deploy-heroku:
  #   name: Deploy to Heroku
  #   runs-on: ubuntu-latest
  #   needs: [test, build]
  #   if: github.ref == 'refs/heads/main'
  #   
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #
  #     - name: Deploy to Heroku
  #       uses: akhileshns/heroku-deploy@v3.12.14
  #       with:
  #         heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
  #         heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
  #         heroku_email: ${{ secrets.HEROKU_EMAIL }}

  # Security Scan
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
